image: alpine:latest

before_script:
  - if [ ! $TIMEOUT ]; then export TIMEOUT='2m'; fi
  - if [ ! $PROJECT_PATH ]; then export PROJECT_PATH='.'; fi

stages:
  - build
  - review
  - staging
  - production

build:
  stage: build
  image: docker:stable
  services:
    - docker:18-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  script:
    - cd ${PROJECT_PATH}
    - docker build -t ${CI_PROJECT_PATH_SLUG} .

review:
  stage: review
  image: google/cloud-sdk:latest
  environment: review
  script:
    - export TMP_FILE=/tmp/${CI_PIPELINE_ID}.json
    - export TAG=gcr.io/${CLOUDSDK_CORE_PROJECT}/${CI_JOB_STAGE}-${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_ID}
    - echo ${GCLOUD_SERVICE_ACCOUNT} > ${TMP_FILE}
    - gcloud auth activate-service-account --key-file ${TMP_FILE}
    - gcloud config set project ${CLOUDSDK_CORE_PROJECT}
    - gcloud builds submit --tag ${TAG} ${PROJECT_PATH}
    - if [ $PUBLIC ]; then export AUTH='--allow-unauthenticated'; else export AUTH=''; fi
    - echo ${ENV_VARS}
    - echo ${AUTH}
    - gcloud beta run deploy ${CI_JOB_STAGE}-${CI_PROJECT_PATH_SLUG} --image ${TAG} --platform managed --region ${GCLOUD_PROJECT_REGION} ${AUTH} --timeout ${TIMEOUT} --update-env-vars ${ENV_VARS}
    - if [ ! -z $AUTH ]; then gcloud beta run services add-iam-policy-binding ${CI_JOB_STAGE}-${CI_PROJECT_PATH_SLUG} --member="allUsers" --role="roles/run.invoker" --region ${GCLOUD_PROJECT_REGION}; fi
  only:
    refs:
      - branches
    variables:
      - $GCLOUD_PROJECT_REGION
  except:
    refs:
      - master
      
staging:
  stage: staging
  image: google/cloud-sdk:latest
  environment: staging
  script:
    - export TMP_FILE=/tmp/${CI_PIPELINE_ID}.json
    - export TAG=gcr.io/${CLOUDSDK_CORE_PROJECT}/${CI_JOB_STAGE}-${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_ID}
    - echo ${GCLOUD_SERVICE_ACCOUNT} > ${TMP_FILE}
    - gcloud auth activate-service-account --key-file ${TMP_FILE}
    - gcloud config set project ${CLOUDSDK_CORE_PROJECT}
    - gcloud builds submit --tag ${TAG} ${PROJECT_PATH}
    - if [ $PUBLIC ]; then export AUTH='--allow-unauthenticated'; else export AUTH=''; fi
    - gcloud beta run deploy ${CI_JOB_STAGE}-${CI_PROJECT_PATH_SLUG} --image ${TAG} --platform managed --region ${GCLOUD_PROJECT_REGION} ${AUTH} --timeout ${TIMEOUT} --update-env-vars ${ENV_VARS}
    - if [ ! -z $AUTH ]; then gcloud beta run services add-iam-policy-binding ${CI_JOB_STAGE}-${CI_PROJECT_PATH_SLUG} --member="allUsers" --role="roles/run.invoker" --region ${GCLOUD_PROJECT_REGION}; fi
  only:
    refs:
      - master
    variables:
      - $GCLOUD_PROJECT_REGION
      
production:
  stage: production
  image: google/cloud-sdk:latest
  environment: production
  script:
    - export TMP_FILE=/tmp/${CI_PIPELINE_ID}.json
    - export TAG=gcr.io/${CLOUDSDK_CORE_PROJECT}/${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_ID}
    - echo ${GCLOUD_SERVICE_ACCOUNT} > ${TMP_FILE}
    - gcloud auth activate-service-account --key-file ${TMP_FILE}
    - gcloud config set project ${CLOUDSDK_CORE_PROJECT}
    - gcloud builds submit --tag ${TAG} ${PROJECT_PATH}
    - if [ $PUBLIC ]; then export AUTH='--allow-unauthenticated'; else export AUTH=''; fi
    - gcloud beta run deploy ${CI_PROJECT_PATH_SLUG} --image ${TAG} --platform managed --region ${GCLOUD_PROJECT_REGION} ${AUTH} --timeout ${TIMEOUT} --update-env-vars ${ENV_VARS}
    - if [ ! -z $AUTH ]; then gcloud beta run services add-iam-policy-binding ${CI_PROJECT_PATH_SLUG} --member="allUsers" --role="roles/run.invoker" --region ${GCLOUD_PROJECT_REGION}; fi
  only:
    refs:
      - master
    variables:
      - $GCLOUD_PROJECT_REGION
      
after_script:
  - printenv
